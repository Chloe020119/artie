generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name          String
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  conversations Conversation[]
  workFavorites WorkFavorite[]
}

model Author {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  era         String
  birthplace  String
  keywords    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  works       Work[]
}

model Work {
  title               String
  description         String
  authorId            String         @db.Uuid
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  id                  String         @id
  imageUrl            String?
  descriptionAudioUrl String?
  firstComment        String?
  funFactComments     String[]       @default([])
  suggestComments     String[]       @default([])
  conversations       Conversation[]
  author              Author         @relation(fields: [authorId], references: [id])
  workFavoritedBy     WorkFavorite[]
  pickUpWorks     PickUpWork[] 

  @@index([authorId])
}

model Conversation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  workId    String
  sender    Sender   @default(USER)
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workId])
  @@index([createdAt])
}

model WorkFavorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  workId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
  @@index([workId])
}

model PickUpWork {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workId         String         
  comment        String
  showArtieModel ShowArtieModel
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  work           Work           @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
}

enum Sender {
  USER
  AI
}

enum ShowArtieModel {
  PAINTING
  DEFAULT
  ANGRY
  RUSHING
  SURPRISE
  TIRED
  UMM
}