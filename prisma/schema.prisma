// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversations Conversation[]
  workFavorites WorkFavorite[]
}

model Author {
  id        String   @id @default(uuid()) @db.Uuid // UUID 型に指定
  name      String
  description String
  era       String
  birthplace String
  keywords  String[]
  works     Work[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Work {
  id              String          @id
  title           String
  description     String
  imageUrl        String?
  author          Author          @relation(fields: [authorId], references: [id])
  authorId        String          @db.Uuid
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  conversations    Conversation[]
  workFavoritedBy WorkFavorite[]

  @@index([authorId])
}

model Conversation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId    String
  sender    Sender   @default(USER)
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([workId])
  @@index([createdAt])
}

enum Sender {
  USER
  AI
}

model WorkFavorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId    String
  createdAt DateTime @default(now())

  @@unique([userId, workId])
  @@index([workId])
}