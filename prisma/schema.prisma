// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid // UUIDとして自動生成
  name      String                         // ユーザー名
  email     String   @unique               // ユニークなメールアドレス
  imageUrl  String?                        // 画像URL (任意フィールド)
  createdAt DateTime @default(now())       // 作成日時
  updatedAt DateTime @updatedAt            // 更新日時
  conversations Conversation[]                 // ユーザーの会話リレーション
}

model Author {
  id        String   @id @default(uuid()) @db.Uuid // UUID 型に指定
  name      String
  description String
  era       String
  birthplace String
  keywords  String[]
  works     Work[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Work {
  id        String   @id
  title     String
  description String
  imageUrl    String?
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 conversations Conversation[]                 // 作品の会話リレーション
}

model Conversation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ユーザーとの関連
  userId    String   @db.Uuid
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade) // 作品との関連
  workId    String  
  sender    Sender   @default(USER)              // 発話者 (USER または AI)
  message   String                               // 発話内容
  createdAt DateTime @default(now())             // 発話日時
}

enum Sender {
  USER
  AI
}
